import { Test, TestingModule } from '@nestjs/testing';
import { DestinationsService } from './destinations.service';
import { Destination } from './entities/destination.entity';
import { ConfigService } from '@nestjs/config';
import { GoogleGenerativeAI, GoogleGenerativeAIError } from '@google/generative-ai';
import { createQueryBuilder, Repository } from 'typeorm';
import { getRepositoryToken } from '@nestjs/typeorm';
import { NotFoundException, UnauthorizedException } from '@nestjs/common';
import { Photo } from '../photos/entities/photo.entity';

// Disable console.error
global.console.error = jest.fn();

describe('DestinationsService', () => {
  let service: DestinationsService;
  let destinationRepository: Repository<Destination>;
  let configService: ConfigService;

  const DESTINATION_REPOSITORY_TOKEN = getRepositoryToken(Destination);
  
  const mockQueryBuilder = {
    leftJoinAndSelect: jest.fn().mockReturnThis(),
    where: jest.fn().mockReturnThis(),
    select: jest.fn().mockReturnThis(),
    getOne: jest.fn().mockResolvedValue(null)
  }
  
  const mockDestinationRepository = {
    createQueryBuilder: jest.fn().mockReturnValue(mockQueryBuilder),
    save: jest.fn(),
    find: jest.fn(),
    findBy: jest.fn(),
    findOne: jest.fn(),
    update: jest.fn(),
    delete: jest.fn()
  }

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [
        DestinationsService,
        {
          provide: DESTINATION_REPOSITORY_TOKEN,
          useValue: mockDestinationRepository,
        },
        {
          provide: ConfigService,
          useValue: {
            get: jest.fn().mockReturnValue('fake-api-key'),
          },
        },
      ],
    }).compile();

    service = module.get<DestinationsService>(DestinationsService);
    destinationRepository = module.get<Repository<Destination>>(
      DESTINATION_REPOSITORY_TOKEN,
    );
    configService = module.get<ConfigService>(ConfigService);
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  it('should be defined', () => {
    expect(service).toBeDefined();
  });

  it('destinationRepository should be defined', () => {
    expect(destinationRepository).toBeDefined();
  });
 
  describe('create', () => {
    const mockDestination = {
      name: 'Test Destination',
      photos: [
        { url: 'http://images/photo1.jpg', description: 'destination image' },
      ],
      target: 'A destination target',
    };

    it('should create a destination with AI auto-generating text if descriptive text is not provided', async () => {
      const expectedAIText = 'Text generated by Cohere AI';
      jest.spyOn(service, 'generateDescriptionWithGemini').mockResolvedValue(expectedAIText);

      await service.create(mockDestination);

      expect(destinationRepository.save).toHaveBeenCalledWith({
        ...mockDestination,
        descriptiveText: expectedAIText,
      });
    });

    it('should call destinationRepository.save with correct params', async () => {
      const result = {
        ...mockDestination,
        descriptiveText: 'Descriptive text',
      };

      await service.create(result);

      expect(destinationRepository.save).toHaveBeenCalledWith(result);
    });
  });

  describe('generateDescriptionWithGemini', () => {
    it('should return a description', async () => {
      const prompt = 'Test prompt';
      const mockResponse = { response: { text: jest.fn().mockReturnValue('Generated description') } };
      const mockModel = { generateContent: jest.fn().mockResolvedValue(mockResponse) };
      jest.spyOn(GoogleGenerativeAI.prototype, 'getGenerativeModel').mockReturnValue(mockModel as any);

      const result = await service.generateDescriptionWithGemini(prompt);
      expect(result).toBe('Generated description');
    });

    it('should throw UnauthorizedException for GoogleGenerativeAIError', async () => {
      const prompt = 'Test prompt';
      const error = new GoogleGenerativeAIError('Unauthorized');
      jest.spyOn(GoogleGenerativeAI.prototype, 'getGenerativeModel').mockImplementation(() => {
        throw error;
      });

      const result = service.generateDescriptionWithGemini(prompt);
      
      expect(result).rejects.toThrow(UnauthorizedException);
    });

    it('should throw a generic error for other errors', async () => {
      const prompt = 'Test prompt';
      const error = new Error('Generic error');
      jest.spyOn(GoogleGenerativeAI.prototype, 'getGenerativeModel').mockImplementation(() => {
        throw error;
      });

      const result = service.generateDescriptionWithGemini(prompt);
      
      expect(result).rejects.toThrow('Error getting Gemini description');
    });
  });

  describe('findAll', () => {
    it('should throw an error if destination not found', async () => {
      jest.spyOn(destinationRepository, 'find').mockResolvedValueOnce([]);

      const result = service.findAll();

      expect(result).rejects.toBeInstanceOf(NotFoundException);
      expect(result).rejects.toThrow('Any destination was found');
    });
  });

  describe('findOne', () => {
    it('should throw an error if destination not found', async () => {
      const result = service.findOne('uuid');
      
      expect(result).rejects.toBeInstanceOf(NotFoundException);
      expect(result).rejects.toThrow('Destination not found');
    });
  });

  describe('update', () => {
    it('should throw an error if destination not found', async () => {
      jest
        .spyOn(destinationRepository, 'update')
        .mockResolvedValueOnce({ affected: 0, generatedMaps: [], raw: '' });

      const result = service.update('uuid', { name: 'Lisbon' });

      expect(result).rejects.toBeInstanceOf(NotFoundException);
      expect(result).rejects.toThrow('Destination not found');
    });
  });

  describe('remove', () => {
    it('should throw an error if destination not found', async () => {
      jest
        .spyOn(destinationRepository, 'delete')
        .mockResolvedValueOnce({ affected: 0, raw: '' });

      const result = service.remove('uuid');

      expect(result).rejects.toBeInstanceOf(NotFoundException);
      expect(result).rejects.toThrow('Destination not found');
    });
  });

  describe('attachPhotos', () => {
    it('should create a new photo and insert to a destination', async () => {
      const mockDestination = {
        name: 'Test Destination',
        photos: [
          { url: 'http://images/photo1.jpg', description: 'destination image' },
        ],
        target: 'A destination target',
      };

      jest.spyOn(service as any, 'findOne').mockResolvedValue(mockDestination);

      /* Alternative */
      // Captures a createQueryBuilder's getOne method and returns any desired value

      // jest.spyOn(mockQueryBuilder, 'getOne').mockResolvedValue(mockDestination);

  
      const files: Express.Multer.File[] = []
  
      const result = await service.attachPhotos('1', files);
      
      expect(result).toHaveLength(1);
      expect(result[0]).toEqual({
        description: expect.any(String),
        url: expect.any(String)
      })
      expect(destinationRepository.save).toHaveBeenCalledWith(mockDestination);
    })
  });
});
